#
# Copyright (C) [2020] Futurewei Technologies, Inc.
#
# FORCE-RISCV is licensed under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from riscv.EnvRISCV import EnvRISCV
from riscv.GenThreadRISCV import GenThreadRISCV
from base.Sequence import Sequence
from base.InstructionMap import InstructionMap
from DV.riscv.trees.instruction_tree import *


class MainSequence(Sequence):
    """Generate a sequence of instructions that are randomly selected from the
    specified subset of RISC-V instructions.
    1 specify the number of instructions to be generated by setting
        instruction_count
    2 specify a the desired subset by setting the instruction_group.  Some of
        the predefined instruction subsets are listed below with the
        statement for all but one commented out. Just uncomment the subset you
        wish to use, while commenting out the others.  For more details on
        the specific instructions in each subset and a list of the other
        available predefined subsets, see
        force/py/DV/riscv/trees/instruction_tree.py.
    3 if you want to a specific instruction, set the_instruction2 to the
        appropriate string and use the_instruction2 in the genInstruction call.
    
    生成从指定的RISC-V指令子集中随机选择的指令序列。
    1 通过设置instruction_count来指定要生成的指令数量
    2 通过设置instruction_group来指定所需的子集。下面列出了一些预定义的指令子集，
        除了一个外，其他语句都被注释掉了。只需取消注释您想要使用的子集，
        同时注释掉其他子集。有关每个子集中特定指令的更多详细信息
        以及其他可用预定义子集的列表，请参见
        force/py/DV/riscv/trees/instruction_tree.py。
    3 如果您想要特定的指令，请将the_instruction2设置为适当的字符串，
        并在genInstruction调用中使用the_instruction2。
    """

    def generate(self, **kargs):

        # 1 - set the number of instructions to generate,
        # can configure via control file with generator option -
        # 'instruction_count'
        # 1 - 设置要生成的指令数量，
        # 可以通过控制文件使用生成器选项 -
        # 'instruction_count' 进行配置
        (count_opt, count_opt_valid) = self.getOption("instruction_count")
        if count_opt_valid:
            instruction_count = count_opt
        else:
            instruction_count = 100

        # 2 - Choose the subset of RISCV instruction you wish to use
        # 2 - 选择您希望使用的RISCV指令子集
        instruction_group = (
            RV32_G_instructions
            if self.getGlobalState("AppRegisterWidth") == 32
            else RV_G_instructions
        )

        """
        # instruction_group = BranchJump_instructions
        # instruction_group = LDST_All_instructions
        # instruction_group = ALU_Int_All_instructions
        # instruction_group = ALU_Float_All_instructions
        # instruction_group = RV32I_instructions
        # instruction_group = RV_A_instructions

        # 3 - If you want to specify a specific instruction, set
        # the_instruction2 to the appropriate string here and replace the
        # argument in the genInstruction call to the_instruction2.  For the
        # string values to use for a given instruction, search for that
        # instruction in force/py/DV/riscv/trees/instruction_tree.py.
        # the_instruction2 = "ADD##RISCV"
        
        # 3 - 如果您想要指定特定的指令，请在此处将the_instruction2设置为
        # 适当的字符串，并将genInstruction调用中的参数替换为the_instruction2。
        # 对于给定指令要使用的字符串值，请在
        # force/py/DV/riscv/trees/instruction_tree.py中搜索该指令。
        # the_instruction2 = "ADD##RISCV"
        """
        for _ in range(instruction_count):
            # select a specific instruction from the instruction group
            # 从指令组中选择一个特定的指令
            the_instruction = self.pickWeighted(instruction_group)

            # create the instruction
            # 创建指令
            record_id = self.genInstruction(the_instruction)
            slef.notice(">>>>> The instruction: {}".format(instr))


#  Points to the MainSequence defined in this file
#  指向此文件中定义的MainSequence
MainSequenceClass = MainSequence

#  Using GenThreadRISCV by default, can be overriden with extended classes
#  默认使用GenThreadRISCV，可以用扩展类覆盖
GenThreadClass = GenThreadRISCV

#  Using EnvRISCV by default, can be overriden with extended classes
#  默认使用EnvRISCV，可以用扩展类覆盖
EnvClass = EnvRISCV
